# routers/events.py
# –ò–º–ø–æ—Ä—Ç enum, –µ—Å–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
from typing import Optional
from fastapi import APIRouter, Depends, HTTPException, UploadFile, status, Query, Form, File
from sqlalchemy.orm import Session
from typing import List, Optional
from app.db.models.favorite import Favorite
from app.db.session import get_db
from app.db.models.user import User
from app.db.models.event import Event
from app.schemas.common import UserOut
from app.schemas.event import EventCreate, EventOut, EventRead, EventUpdate
from app.routes.auth import get_current_user, get_current_admin
from sqlalchemy import desc, asc
from app.schemas.event import EventCategory
from sqlalchemy.orm import joinedload


router = APIRouter(prefix="/events", tags=["–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"])

@router.post("/", response_model=EventOut)
def create_event(event: EventCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_admin)):
    new_event = Event(**event.dict(), creator_id=current_user.id)
    db.add(new_event)
    db.commit()
    db.refresh(new_event)
    return new_event


MAX_LIMIT = 100




@router.get("/", response_model=List[EventOut])
def get_all_events(
    db: Session = Depends(get_db),
    skip: int = Query(0, ge=0),
    limit: int = Query(10, le=MAX_LIMIT),
    sort_by: str = Query("event_date", enum=["event_date", "created_at"]),
    order: str = Query("asc", enum=["asc", "desc"]),
    category: Optional[EventCategory] = Query(None),
     is_approved: Optional[bool] = Query(None)
    
):
    order_func = asc if order == "asc" else desc

    query = db.query(Event)

    if category:
        query = query.filter(Event.category == category)
    if is_approved is not None:  # üëà –¥–æ–±–∞–≤—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É
        query = query.filter(Event.is_approved == is_approved)

    if sort_by == "event_date":
        query = query.order_by(order_func(Event.event_date))
    else:
        query = query.order_by(order_func(Event.created_at))

    events = query.options(joinedload(Event.participants)).offset(skip).limit(limit).all()

# –¥–æ–±–∞–≤–ª—è–µ–º participants_count –≤—Ä—É—á–Ω—É—é
    result = [
    EventOut.from_orm(event).model_copy(update={
        "participants_count": len(event.participants)
    })
    for event in events
]
    return result

@router.get("/favorites", response_model=list[EventOut])
def get_favorites(
    db: Session = Depends(get_db),
    user = Depends(get_current_user)
):
    favorites = (
        db.query(Event)
        .join(Favorite, Favorite.event_id == Event.id)
        .filter(Favorite.user_id == user.id)
        .all()
    )
    return favorites

@router.get("/{event_id}", response_model=EventRead)
def get_event(
    event_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    event = (
        db.query(Event)
        .options(joinedload(Event.creator), joinedload(Event.participants))
        .filter(Event.id == event_id)
        .first()
    )

    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    is_favorite = (
        db.query(Favorite)
        .filter_by(user_id=current_user.id, event_id=event.id)
        .first() is not None
        
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º from_orm –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
    return EventRead.from_orm(event).model_copy(update={
        "joined": current_user in event.participants,
        "participants_count": len(event.participants),
        "is_favorite": is_favorite,
    })



@router.put("/{event_id}", response_model=EventOut)
def update_event(event_id: int, updated: EventUpdate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    event = db.query(Event).filter(Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    if event.creator_id != current_user.id:
        raise HTTPException(
            status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    for key, value in updated.dict(exclude_unset=True).items():
        setattr(event, key, value)

    db.commit()
    db.refresh(event)
    return event


@router.delete("/{event_id}")
def delete_event(event_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    event = db.query(Event).filter(Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    if event.creator_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    db.delete(event)
    db.commit()
    return {"message": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ"}

@router.get("/by-user/{user_id}", response_model=List[EventOut])
def get_events_by_user(user_id: int, db: Session = Depends(get_db)):
    return db.query(Event).filter(Event.creator_id == user_id).all()

@router.post("/{event_id}/attend")
def attend_event(event_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    event = db.query(Event).filter(Event.id == event_id).first()

    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if current_user in event.participants:
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å")

    event.participants.append(current_user)
    db.commit()
    return {"detail": "–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"}


@router.get("/{event_id}/participants", response_model=List[UserOut])
def get_event_participants(event_id: int, db: Session = Depends(get_db)):
    event = db.query(Event).filter(Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return event.participants

@router.post("/{event_id}/cancel")
def cancel_attendance(event_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    event = db.query(Event).filter(Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if current_user not in event.participants:
        raise HTTPException(status_code=400, detail="–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã")

    event.participants.remove(current_user)
    db.commit()
    return {"detail": "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ"}

@router.post("/{event_id}/favorite")
def add_favorite(event_id: int, user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    favorite = db.query(Favorite).filter_by(user_id=user.id, event_id=event_id).first()
    if favorite:
        raise HTTPException(status_code=400, detail="–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    db.add(Favorite(user_id=user.id, event_id=event_id))
    db.commit()
    return {"status": "added"}


@router.post("/{event_id}/unfavorite")
def remove_favorite(event_id: int, user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    favorite = db.query(Favorite).filter_by(user_id=user.id, event_id=event_id).first()
    if not favorite:
        raise HTTPException(status_code=404, detail="–ù–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    db.delete(favorite)
    db.commit()
    return {"status": "removed"}

